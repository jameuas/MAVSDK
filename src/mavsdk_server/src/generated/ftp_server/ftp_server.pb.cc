// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftp_server/ftp_server.proto

#include "ftp_server/ftp_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mavsdk {
namespace rpc {
namespace ftp_server {
PROTOBUF_CONSTEXPR ProvideFileRequest::ProvideFileRequest(
    ::_pbi::ConstantInitialized)
  : path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ProvideFileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProvideFileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProvideFileRequestDefaultTypeInternal() {}
  union {
    ProvideFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProvideFileRequestDefaultTypeInternal _ProvideFileRequest_default_instance_;
PROTOBUF_CONSTEXPR ProvideFileResponse::ProvideFileResponse(
    ::_pbi::ConstantInitialized)
  : ftp_server_result_(nullptr){}
struct ProvideFileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProvideFileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProvideFileResponseDefaultTypeInternal() {}
  union {
    ProvideFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProvideFileResponseDefaultTypeInternal _ProvideFileResponse_default_instance_;
PROTOBUF_CONSTEXPR FtpServerResult::FtpServerResult(
    ::_pbi::ConstantInitialized)
  : result_str_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(0)
{}
struct FtpServerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FtpServerResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FtpServerResultDefaultTypeInternal() {}
  union {
    FtpServerResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FtpServerResultDefaultTypeInternal _FtpServerResult_default_instance_;
}  // namespace ftp_server
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_ftp_5fserver_2fftp_5fserver_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ftp_5fserver_2fftp_5fserver_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ftp_5fserver_2fftp_5fserver_2eproto = nullptr;

const uint32_t TableStruct_ftp_5fserver_2fftp_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::ftp_server::ProvideFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::ftp_server::ProvideFileRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::ftp_server::ProvideFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::ftp_server::ProvideFileResponse, ftp_server_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::ftp_server::FtpServerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::ftp_server::FtpServerResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::ftp_server::FtpServerResult, result_str_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mavsdk::rpc::ftp_server::ProvideFileRequest)},
  { 7, -1, -1, sizeof(::mavsdk::rpc::ftp_server::ProvideFileResponse)},
  { 14, -1, -1, sizeof(::mavsdk::rpc::ftp_server::FtpServerResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mavsdk::rpc::ftp_server::_ProvideFileRequest_default_instance_._instance,
  &::mavsdk::rpc::ftp_server::_ProvideFileResponse_default_instance_._instance,
  &::mavsdk::rpc::ftp_server::_FtpServerResult_default_instance_._instance,
};

const char descriptor_table_protodef_ftp_5fserver_2fftp_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033ftp_server/ftp_server.proto\022\025mavsdk.rp"
  "c.ftp_server\032\024mavsdk_options.proto\"\"\n\022Pr"
  "ovideFileRequest\022\014\n\004path\030\001 \001(\t\"X\n\023Provid"
  "eFileResponse\022A\n\021ftp_server_result\030\001 \001(\013"
  "2&.mavsdk.rpc.ftp_server.FtpServerResult"
  "\"\302\001\n\017FtpServerResult\022=\n\006result\030\001 \001(\0162-.m"
  "avsdk.rpc.ftp_server.FtpServerResult.Res"
  "ult\022\022\n\nresult_str\030\002 \001(\t\"\\\n\006Result\022\022\n\016RES"
  "ULT_UNKNOWN\020\000\022\022\n\016RESULT_SUCCESS\020\001\022\024\n\020RES"
  "ULT_NOT_FOUND\020\002\022\024\n\020RESULT_DUPLICATE\020\0032~\n"
  "\020FtpServerService\022j\n\013ProvideFile\022).mavsd"
  "k.rpc.ftp_server.ProvideFileRequest\032*.ma"
  "vsdk.rpc.ftp_server.ProvideFileResponse\""
  "\004\200\265\030\001B&\n\024io.mavsdk.ftp_serverB\016FtpServer"
  "Protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::_pbi::once_flag descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto = {
    false, false, 573, descriptor_table_protodef_ftp_5fserver_2fftp_5fserver_2eproto,
    "ftp_server/ftp_server.proto",
    &descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_once, descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_ftp_5fserver_2fftp_5fserver_2eproto::offsets,
    file_level_metadata_ftp_5fserver_2fftp_5fserver_2eproto, file_level_enum_descriptors_ftp_5fserver_2fftp_5fserver_2eproto,
    file_level_service_descriptors_ftp_5fserver_2fftp_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_getter() {
  return &descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ftp_5fserver_2fftp_5fserver_2eproto(&descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto);
namespace mavsdk {
namespace rpc {
namespace ftp_server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FtpServerResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto);
  return file_level_enum_descriptors_ftp_5fserver_2fftp_5fserver_2eproto[0];
}
bool FtpServerResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FtpServerResult_Result FtpServerResult::RESULT_UNKNOWN;
constexpr FtpServerResult_Result FtpServerResult::RESULT_SUCCESS;
constexpr FtpServerResult_Result FtpServerResult::RESULT_NOT_FOUND;
constexpr FtpServerResult_Result FtpServerResult::RESULT_DUPLICATE;
constexpr FtpServerResult_Result FtpServerResult::Result_MIN;
constexpr FtpServerResult_Result FtpServerResult::Result_MAX;
constexpr int FtpServerResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ProvideFileRequest::_Internal {
 public:
};

ProvideFileRequest::ProvideFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.ftp_server.ProvideFileRequest)
}
ProvideFileRequest::ProvideFileRequest(const ProvideFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.ftp_server.ProvideFileRequest)
}

inline void ProvideFileRequest::SharedCtor() {
path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProvideFileRequest::~ProvideFileRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.ftp_server.ProvideFileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProvideFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.Destroy();
}

void ProvideFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.ftp_server.ProvideFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideFileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.ftp_server.ProvideFileRequest.path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProvideFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.ftp_server.ProvideFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.ftp_server.ProvideFileRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.ftp_server.ProvideFileRequest)
  return target;
}

size_t ProvideFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.ftp_server.ProvideFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideFileRequest::GetClassData() const { return &_class_data_; }

void ProvideFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProvideFileRequest *>(to)->MergeFrom(
      static_cast<const ProvideFileRequest &>(from));
}


void ProvideFileRequest::MergeFrom(const ProvideFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.ftp_server.ProvideFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideFileRequest::CopyFrom(const ProvideFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.ftp_server.ProvideFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideFileRequest::IsInitialized() const {
  return true;
}

void ProvideFileRequest::InternalSwap(ProvideFileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideFileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_getter, &descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_once,
      file_level_metadata_ftp_5fserver_2fftp_5fserver_2eproto[0]);
}

// ===================================================================

class ProvideFileResponse::_Internal {
 public:
  static const ::mavsdk::rpc::ftp_server::FtpServerResult& ftp_server_result(const ProvideFileResponse* msg);
};

const ::mavsdk::rpc::ftp_server::FtpServerResult&
ProvideFileResponse::_Internal::ftp_server_result(const ProvideFileResponse* msg) {
  return *msg->ftp_server_result_;
}
ProvideFileResponse::ProvideFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.ftp_server.ProvideFileResponse)
}
ProvideFileResponse::ProvideFileResponse(const ProvideFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ftp_server_result()) {
    ftp_server_result_ = new ::mavsdk::rpc::ftp_server::FtpServerResult(*from.ftp_server_result_);
  } else {
    ftp_server_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.ftp_server.ProvideFileResponse)
}

inline void ProvideFileResponse::SharedCtor() {
ftp_server_result_ = nullptr;
}

ProvideFileResponse::~ProvideFileResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.ftp_server.ProvideFileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProvideFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ftp_server_result_;
}

void ProvideFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProvideFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.ftp_server.ProvideFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ftp_server_result_ != nullptr) {
    delete ftp_server_result_;
  }
  ftp_server_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProvideFileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.ftp_server.FtpServerResult ftp_server_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ftp_server_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProvideFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.ftp_server.ProvideFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.ftp_server.FtpServerResult ftp_server_result = 1;
  if (this->_internal_has_ftp_server_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ftp_server_result(this),
        _Internal::ftp_server_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.ftp_server.ProvideFileResponse)
  return target;
}

size_t ProvideFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.ftp_server.ProvideFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.ftp_server.FtpServerResult ftp_server_result = 1;
  if (this->_internal_has_ftp_server_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ftp_server_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProvideFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProvideFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProvideFileResponse::GetClassData() const { return &_class_data_; }

void ProvideFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProvideFileResponse *>(to)->MergeFrom(
      static_cast<const ProvideFileResponse &>(from));
}


void ProvideFileResponse::MergeFrom(const ProvideFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.ftp_server.ProvideFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ftp_server_result()) {
    _internal_mutable_ftp_server_result()->::mavsdk::rpc::ftp_server::FtpServerResult::MergeFrom(from._internal_ftp_server_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProvideFileResponse::CopyFrom(const ProvideFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.ftp_server.ProvideFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProvideFileResponse::IsInitialized() const {
  return true;
}

void ProvideFileResponse::InternalSwap(ProvideFileResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ftp_server_result_, other->ftp_server_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProvideFileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_getter, &descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_once,
      file_level_metadata_ftp_5fserver_2fftp_5fserver_2eproto[1]);
}

// ===================================================================

class FtpServerResult::_Internal {
 public:
};

FtpServerResult::FtpServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.ftp_server.FtpServerResult)
}
FtpServerResult::FtpServerResult(const FtpServerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result_str().empty()) {
    result_str_.Set(from._internal_result_str(), 
      GetArenaForAllocation());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.ftp_server.FtpServerResult)
}

inline void FtpServerResult::SharedCtor() {
result_str_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_str_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_ = 0;
}

FtpServerResult::~FtpServerResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.ftp_server.FtpServerResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FtpServerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  result_str_.Destroy();
}

void FtpServerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtpServerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.ftp_server.FtpServerResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmpty();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtpServerResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.ftp_server.FtpServerResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::ftp_server::FtpServerResult_Result>(val));
        } else
          goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mavsdk.rpc.ftp_server.FtpServerResult.result_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtpServerResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.ftp_server.FtpServerResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.ftp_server.FtpServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.ftp_server.FtpServerResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.ftp_server.FtpServerResult)
  return target;
}

size_t FtpServerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.ftp_server.FtpServerResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (!this->_internal_result_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.ftp_server.FtpServerResult.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtpServerResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FtpServerResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtpServerResult::GetClassData() const { return &_class_data_; }

void FtpServerResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FtpServerResult *>(to)->MergeFrom(
      static_cast<const FtpServerResult &>(from));
}


void FtpServerResult::MergeFrom(const FtpServerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.ftp_server.FtpServerResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result_str().empty()) {
    _internal_set_result_str(from._internal_result_str());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtpServerResult::CopyFrom(const FtpServerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.ftp_server.FtpServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtpServerResult::IsInitialized() const {
  return true;
}

void FtpServerResult::InternalSwap(FtpServerResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &result_str_, lhs_arena,
      &other->result_str_, rhs_arena
  );
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FtpServerResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_getter, &descriptor_table_ftp_5fserver_2fftp_5fserver_2eproto_once,
      file_level_metadata_ftp_5fserver_2fftp_5fserver_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ftp_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::ftp_server::ProvideFileRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::ftp_server::ProvideFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::ftp_server::ProvideFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::ftp_server::ProvideFileResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::ftp_server::ProvideFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::ftp_server::ProvideFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::ftp_server::FtpServerResult*
Arena::CreateMaybeMessage< ::mavsdk::rpc::ftp_server::FtpServerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::ftp_server::FtpServerResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
