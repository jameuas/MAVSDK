// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ftp_server/ftp_server.proto

#include "ftp_server/ftp_server.pb.h"
#include "ftp_server/ftp_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace ftp_server {

static const char* FtpServerService_method_names[] = {
  "/mavsdk.rpc.ftp_server.FtpServerService/ProvideFile",
};

std::unique_ptr< FtpServerService::Stub> FtpServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FtpServerService::Stub> stub(new FtpServerService::Stub(channel, options));
  return stub;
}

FtpServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProvideFile_(FtpServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FtpServerService::Stub::ProvideFile(::grpc::ClientContext* context, const ::mavsdk::rpc::ftp_server::ProvideFileRequest& request, ::mavsdk::rpc::ftp_server::ProvideFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::ftp_server::ProvideFileRequest, ::mavsdk::rpc::ftp_server::ProvideFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvideFile_, context, request, response);
}

void FtpServerService::Stub::async::ProvideFile(::grpc::ClientContext* context, const ::mavsdk::rpc::ftp_server::ProvideFileRequest* request, ::mavsdk::rpc::ftp_server::ProvideFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::ftp_server::ProvideFileRequest, ::mavsdk::rpc::ftp_server::ProvideFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideFile_, context, request, response, std::move(f));
}

void FtpServerService::Stub::async::ProvideFile(::grpc::ClientContext* context, const ::mavsdk::rpc::ftp_server::ProvideFileRequest* request, ::mavsdk::rpc::ftp_server::ProvideFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvideFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::ftp_server::ProvideFileResponse>* FtpServerService::Stub::PrepareAsyncProvideFileRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::ftp_server::ProvideFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::ftp_server::ProvideFileResponse, ::mavsdk::rpc::ftp_server::ProvideFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvideFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::ftp_server::ProvideFileResponse>* FtpServerService::Stub::AsyncProvideFileRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::ftp_server::ProvideFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvideFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

FtpServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FtpServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FtpServerService::Service, ::mavsdk::rpc::ftp_server::ProvideFileRequest, ::mavsdk::rpc::ftp_server::ProvideFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FtpServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::ftp_server::ProvideFileRequest* req,
             ::mavsdk::rpc::ftp_server::ProvideFileResponse* resp) {
               return service->ProvideFile(ctx, req, resp);
             }, this)));
}

FtpServerService::Service::~Service() {
}

::grpc::Status FtpServerService::Service::ProvideFile(::grpc::ServerContext* context, const ::mavsdk::rpc::ftp_server::ProvideFileRequest* request, ::mavsdk::rpc::ftp_server::ProvideFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace ftp_server

