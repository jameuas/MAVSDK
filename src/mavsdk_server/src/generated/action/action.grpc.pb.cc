// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: action/action.proto

#include "action/action.pb.h"
#include "action/action.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace action {

static const char* ActionService_method_names[] = {
  "/mavsdk.rpc.action.ActionService/Arm",
  "/mavsdk.rpc.action.ActionService/Disarm",
  "/mavsdk.rpc.action.ActionService/Takeoff",
  "/mavsdk.rpc.action.ActionService/Land",
  "/mavsdk.rpc.action.ActionService/Reboot",
  "/mavsdk.rpc.action.ActionService/Shutdown",
  "/mavsdk.rpc.action.ActionService/Terminate",
  "/mavsdk.rpc.action.ActionService/Kill",
  "/mavsdk.rpc.action.ActionService/ReturnToLaunch",
  "/mavsdk.rpc.action.ActionService/GotoLocation",
  "/mavsdk.rpc.action.ActionService/DoOrbit",
  "/mavsdk.rpc.action.ActionService/Hold",
  "/mavsdk.rpc.action.ActionService/ModeTakeoff",
  "/mavsdk.rpc.action.ActionService/ModeHold",
  "/mavsdk.rpc.action.ActionService/ModeMission",
  "/mavsdk.rpc.action.ActionService/ModeReturnToLaunch",
  "/mavsdk.rpc.action.ActionService/ModeLand",
  "/mavsdk.rpc.action.ActionService/ModeOffboard",
  "/mavsdk.rpc.action.ActionService/ModeFollowMe",
  "/mavsdk.rpc.action.ActionService/ModeManual",
  "/mavsdk.rpc.action.ActionService/ModeAltitudeControl",
  "/mavsdk.rpc.action.ActionService/ModePositionControl",
  "/mavsdk.rpc.action.ActionService/ModeAcro",
  "/mavsdk.rpc.action.ActionService/ModeStabilized",
  "/mavsdk.rpc.action.ActionService/SetActuator",
  "/mavsdk.rpc.action.ActionService/TransitionToFixedwing",
  "/mavsdk.rpc.action.ActionService/TransitionToMulticopter",
  "/mavsdk.rpc.action.ActionService/GetTakeoffAltitude",
  "/mavsdk.rpc.action.ActionService/SetTakeoffAltitude",
  "/mavsdk.rpc.action.ActionService/GetMaximumSpeed",
  "/mavsdk.rpc.action.ActionService/SetMaximumSpeed",
  "/mavsdk.rpc.action.ActionService/GetReturnToLaunchAltitude",
  "/mavsdk.rpc.action.ActionService/SetReturnToLaunchAltitude",
  "/mavsdk.rpc.action.ActionService/SetCurrentSpeed",
};

std::unique_ptr< ActionService::Stub> ActionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ActionService::Stub> stub(new ActionService::Stub(channel, options));
  return stub;
}

ActionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Arm_(ActionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disarm_(ActionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Takeoff_(ActionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Land_(ActionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reboot_(ActionService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Shutdown_(ActionService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Terminate_(ActionService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Kill_(ActionService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReturnToLaunch_(ActionService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GotoLocation_(ActionService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoOrbit_(ActionService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Hold_(ActionService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeTakeoff_(ActionService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeHold_(ActionService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeMission_(ActionService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeReturnToLaunch_(ActionService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeLand_(ActionService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeOffboard_(ActionService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeFollowMe_(ActionService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeManual_(ActionService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeAltitudeControl_(ActionService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModePositionControl_(ActionService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeAcro_(ActionService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModeStabilized_(ActionService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetActuator_(ActionService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransitionToFixedwing_(ActionService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransitionToMulticopter_(ActionService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTakeoffAltitude_(ActionService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTakeoffAltitude_(ActionService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMaximumSpeed_(ActionService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMaximumSpeed_(ActionService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReturnToLaunchAltitude_(ActionService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetReturnToLaunchAltitude_(ActionService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCurrentSpeed_(ActionService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ActionService::Stub::Arm(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ArmRequest& request, ::mavsdk::rpc::action::ArmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ArmRequest, ::mavsdk::rpc::action::ArmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arm_, context, request, response);
}

void ActionService::Stub::async::Arm(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ArmRequest* request, ::mavsdk::rpc::action::ArmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ArmRequest, ::mavsdk::rpc::action::ArmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arm_, context, request, response, std::move(f));
}

void ActionService::Stub::async::Arm(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ArmRequest* request, ::mavsdk::rpc::action::ArmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ArmResponse>* ActionService::Stub::PrepareAsyncArmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ArmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ArmResponse, ::mavsdk::rpc::action::ArmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ArmResponse>* ActionService::Stub::AsyncArmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ArmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::Disarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DisarmRequest& request, ::mavsdk::rpc::action::DisarmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::DisarmRequest, ::mavsdk::rpc::action::DisarmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disarm_, context, request, response);
}

void ActionService::Stub::async::Disarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DisarmRequest* request, ::mavsdk::rpc::action::DisarmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::DisarmRequest, ::mavsdk::rpc::action::DisarmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disarm_, context, request, response, std::move(f));
}

void ActionService::Stub::async::Disarm(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DisarmRequest* request, ::mavsdk::rpc::action::DisarmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disarm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::DisarmResponse>* ActionService::Stub::PrepareAsyncDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DisarmRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::DisarmResponse, ::mavsdk::rpc::action::DisarmRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disarm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::DisarmResponse>* ActionService::Stub::AsyncDisarmRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DisarmRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisarmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::Takeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TakeoffRequest& request, ::mavsdk::rpc::action::TakeoffResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::TakeoffRequest, ::mavsdk::rpc::action::TakeoffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Takeoff_, context, request, response);
}

void ActionService::Stub::async::Takeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TakeoffRequest* request, ::mavsdk::rpc::action::TakeoffResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::TakeoffRequest, ::mavsdk::rpc::action::TakeoffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Takeoff_, context, request, response, std::move(f));
}

void ActionService::Stub::async::Takeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TakeoffRequest* request, ::mavsdk::rpc::action::TakeoffResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Takeoff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::TakeoffResponse>* ActionService::Stub::PrepareAsyncTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TakeoffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::TakeoffResponse, ::mavsdk::rpc::action::TakeoffRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Takeoff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::TakeoffResponse>* ActionService::Stub::AsyncTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TakeoffRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTakeoffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::Land(::grpc::ClientContext* context, const ::mavsdk::rpc::action::LandRequest& request, ::mavsdk::rpc::action::LandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::LandRequest, ::mavsdk::rpc::action::LandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Land_, context, request, response);
}

void ActionService::Stub::async::Land(::grpc::ClientContext* context, const ::mavsdk::rpc::action::LandRequest* request, ::mavsdk::rpc::action::LandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::LandRequest, ::mavsdk::rpc::action::LandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Land_, context, request, response, std::move(f));
}

void ActionService::Stub::async::Land(::grpc::ClientContext* context, const ::mavsdk::rpc::action::LandRequest* request, ::mavsdk::rpc::action::LandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Land_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::LandResponse>* ActionService::Stub::PrepareAsyncLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::LandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::LandResponse, ::mavsdk::rpc::action::LandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Land_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::LandResponse>* ActionService::Stub::AsyncLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::LandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::Reboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action::RebootRequest& request, ::mavsdk::rpc::action::RebootResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::RebootRequest, ::mavsdk::rpc::action::RebootResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reboot_, context, request, response);
}

void ActionService::Stub::async::Reboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action::RebootRequest* request, ::mavsdk::rpc::action::RebootResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::RebootRequest, ::mavsdk::rpc::action::RebootResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, std::move(f));
}

void ActionService::Stub::async::Reboot(::grpc::ClientContext* context, const ::mavsdk::rpc::action::RebootRequest* request, ::mavsdk::rpc::action::RebootResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::RebootResponse>* ActionService::Stub::PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::RebootRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::RebootResponse, ::mavsdk::rpc::action::RebootRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reboot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::RebootResponse>* ActionService::Stub::AsyncRebootRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::RebootRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRebootRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::Shutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ShutdownRequest& request, ::mavsdk::rpc::action::ShutdownResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ShutdownRequest, ::mavsdk::rpc::action::ShutdownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void ActionService::Stub::async::Shutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ShutdownRequest* request, ::mavsdk::rpc::action::ShutdownResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ShutdownRequest, ::mavsdk::rpc::action::ShutdownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void ActionService::Stub::async::Shutdown(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ShutdownRequest* request, ::mavsdk::rpc::action::ShutdownResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ShutdownResponse>* ActionService::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ShutdownResponse, ::mavsdk::rpc::action::ShutdownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ShutdownResponse>* ActionService::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::Terminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TerminateRequest& request, ::mavsdk::rpc::action::TerminateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::TerminateRequest, ::mavsdk::rpc::action::TerminateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Terminate_, context, request, response);
}

void ActionService::Stub::async::Terminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TerminateRequest* request, ::mavsdk::rpc::action::TerminateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::TerminateRequest, ::mavsdk::rpc::action::TerminateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Terminate_, context, request, response, std::move(f));
}

void ActionService::Stub::async::Terminate(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TerminateRequest* request, ::mavsdk::rpc::action::TerminateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Terminate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::TerminateResponse>* ActionService::Stub::PrepareAsyncTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TerminateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::TerminateResponse, ::mavsdk::rpc::action::TerminateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Terminate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::TerminateResponse>* ActionService::Stub::AsyncTerminateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TerminateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTerminateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::Kill(::grpc::ClientContext* context, const ::mavsdk::rpc::action::KillRequest& request, ::mavsdk::rpc::action::KillResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::KillRequest, ::mavsdk::rpc::action::KillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Kill_, context, request, response);
}

void ActionService::Stub::async::Kill(::grpc::ClientContext* context, const ::mavsdk::rpc::action::KillRequest* request, ::mavsdk::rpc::action::KillResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::KillRequest, ::mavsdk::rpc::action::KillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Kill_, context, request, response, std::move(f));
}

void ActionService::Stub::async::Kill(::grpc::ClientContext* context, const ::mavsdk::rpc::action::KillRequest* request, ::mavsdk::rpc::action::KillResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Kill_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::KillResponse>* ActionService::Stub::PrepareAsyncKillRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::KillRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::KillResponse, ::mavsdk::rpc::action::KillRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Kill_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::KillResponse>* ActionService::Stub::AsyncKillRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::KillRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKillRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ReturnToLaunch(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ReturnToLaunchRequest& request, ::mavsdk::rpc::action::ReturnToLaunchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ReturnToLaunchRequest, ::mavsdk::rpc::action::ReturnToLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReturnToLaunch_, context, request, response);
}

void ActionService::Stub::async::ReturnToLaunch(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ReturnToLaunchRequest* request, ::mavsdk::rpc::action::ReturnToLaunchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ReturnToLaunchRequest, ::mavsdk::rpc::action::ReturnToLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReturnToLaunch_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ReturnToLaunch(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ReturnToLaunchRequest* request, ::mavsdk::rpc::action::ReturnToLaunchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReturnToLaunch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ReturnToLaunchResponse>* ActionService::Stub::PrepareAsyncReturnToLaunchRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ReturnToLaunchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ReturnToLaunchResponse, ::mavsdk::rpc::action::ReturnToLaunchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReturnToLaunch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ReturnToLaunchResponse>* ActionService::Stub::AsyncReturnToLaunchRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ReturnToLaunchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReturnToLaunchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::GotoLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GotoLocationRequest& request, ::mavsdk::rpc::action::GotoLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::GotoLocationRequest, ::mavsdk::rpc::action::GotoLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GotoLocation_, context, request, response);
}

void ActionService::Stub::async::GotoLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GotoLocationRequest* request, ::mavsdk::rpc::action::GotoLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::GotoLocationRequest, ::mavsdk::rpc::action::GotoLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GotoLocation_, context, request, response, std::move(f));
}

void ActionService::Stub::async::GotoLocation(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GotoLocationRequest* request, ::mavsdk::rpc::action::GotoLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GotoLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::GotoLocationResponse>* ActionService::Stub::PrepareAsyncGotoLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GotoLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::GotoLocationResponse, ::mavsdk::rpc::action::GotoLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GotoLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::GotoLocationResponse>* ActionService::Stub::AsyncGotoLocationRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GotoLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGotoLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::DoOrbit(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DoOrbitRequest& request, ::mavsdk::rpc::action::DoOrbitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::DoOrbitRequest, ::mavsdk::rpc::action::DoOrbitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoOrbit_, context, request, response);
}

void ActionService::Stub::async::DoOrbit(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DoOrbitRequest* request, ::mavsdk::rpc::action::DoOrbitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::DoOrbitRequest, ::mavsdk::rpc::action::DoOrbitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoOrbit_, context, request, response, std::move(f));
}

void ActionService::Stub::async::DoOrbit(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DoOrbitRequest* request, ::mavsdk::rpc::action::DoOrbitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoOrbit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::DoOrbitResponse>* ActionService::Stub::PrepareAsyncDoOrbitRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DoOrbitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::DoOrbitResponse, ::mavsdk::rpc::action::DoOrbitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoOrbit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::DoOrbitResponse>* ActionService::Stub::AsyncDoOrbitRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::DoOrbitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoOrbitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::Hold(::grpc::ClientContext* context, const ::mavsdk::rpc::action::HoldRequest& request, ::mavsdk::rpc::action::HoldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::HoldRequest, ::mavsdk::rpc::action::HoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Hold_, context, request, response);
}

void ActionService::Stub::async::Hold(::grpc::ClientContext* context, const ::mavsdk::rpc::action::HoldRequest* request, ::mavsdk::rpc::action::HoldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::HoldRequest, ::mavsdk::rpc::action::HoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hold_, context, request, response, std::move(f));
}

void ActionService::Stub::async::Hold(::grpc::ClientContext* context, const ::mavsdk::rpc::action::HoldRequest* request, ::mavsdk::rpc::action::HoldResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::HoldResponse>* ActionService::Stub::PrepareAsyncHoldRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::HoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::HoldResponse, ::mavsdk::rpc::action::HoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Hold_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::HoldResponse>* ActionService::Stub::AsyncHoldRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::HoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHoldRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeTakeoffRequest& request, ::mavsdk::rpc::action::ModeTakeoffResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeTakeoffRequest, ::mavsdk::rpc::action::ModeTakeoffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeTakeoff_, context, request, response);
}

void ActionService::Stub::async::ModeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeTakeoffRequest* request, ::mavsdk::rpc::action::ModeTakeoffResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeTakeoffRequest, ::mavsdk::rpc::action::ModeTakeoffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeTakeoff_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeTakeoff(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeTakeoffRequest* request, ::mavsdk::rpc::action::ModeTakeoffResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeTakeoff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeTakeoffResponse>* ActionService::Stub::PrepareAsyncModeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeTakeoffResponse, ::mavsdk::rpc::action::ModeTakeoffRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeTakeoff_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeTakeoffResponse>* ActionService::Stub::AsyncModeTakeoffRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeTakeoffRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeTakeoffRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeHold(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeHoldRequest& request, ::mavsdk::rpc::action::ModeHoldResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeHoldRequest, ::mavsdk::rpc::action::ModeHoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeHold_, context, request, response);
}

void ActionService::Stub::async::ModeHold(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeHoldRequest* request, ::mavsdk::rpc::action::ModeHoldResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeHoldRequest, ::mavsdk::rpc::action::ModeHoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeHold_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeHold(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeHoldRequest* request, ::mavsdk::rpc::action::ModeHoldResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeHold_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeHoldResponse>* ActionService::Stub::PrepareAsyncModeHoldRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeHoldRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeHoldResponse, ::mavsdk::rpc::action::ModeHoldRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeHold_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeHoldResponse>* ActionService::Stub::AsyncModeHoldRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeHoldRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeHoldRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeMission(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeMissionRequest& request, ::mavsdk::rpc::action::ModeMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeMissionRequest, ::mavsdk::rpc::action::ModeMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeMission_, context, request, response);
}

void ActionService::Stub::async::ModeMission(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeMissionRequest* request, ::mavsdk::rpc::action::ModeMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeMissionRequest, ::mavsdk::rpc::action::ModeMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeMission_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeMission(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeMissionRequest* request, ::mavsdk::rpc::action::ModeMissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeMissionResponse>* ActionService::Stub::PrepareAsyncModeMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeMissionResponse, ::mavsdk::rpc::action::ModeMissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeMission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeMissionResponse>* ActionService::Stub::AsyncModeMissionRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeMissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeMissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeReturnToLaunch(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeReturnToLaunchRequest& request, ::mavsdk::rpc::action::ModeReturnToLaunchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeReturnToLaunchRequest, ::mavsdk::rpc::action::ModeReturnToLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeReturnToLaunch_, context, request, response);
}

void ActionService::Stub::async::ModeReturnToLaunch(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeReturnToLaunchRequest* request, ::mavsdk::rpc::action::ModeReturnToLaunchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeReturnToLaunchRequest, ::mavsdk::rpc::action::ModeReturnToLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeReturnToLaunch_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeReturnToLaunch(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeReturnToLaunchRequest* request, ::mavsdk::rpc::action::ModeReturnToLaunchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeReturnToLaunch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeReturnToLaunchResponse>* ActionService::Stub::PrepareAsyncModeReturnToLaunchRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeReturnToLaunchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeReturnToLaunchResponse, ::mavsdk::rpc::action::ModeReturnToLaunchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeReturnToLaunch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeReturnToLaunchResponse>* ActionService::Stub::AsyncModeReturnToLaunchRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeReturnToLaunchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeReturnToLaunchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeLandRequest& request, ::mavsdk::rpc::action::ModeLandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeLandRequest, ::mavsdk::rpc::action::ModeLandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeLand_, context, request, response);
}

void ActionService::Stub::async::ModeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeLandRequest* request, ::mavsdk::rpc::action::ModeLandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeLandRequest, ::mavsdk::rpc::action::ModeLandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeLand_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeLand(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeLandRequest* request, ::mavsdk::rpc::action::ModeLandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeLand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeLandResponse>* ActionService::Stub::PrepareAsyncModeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeLandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeLandResponse, ::mavsdk::rpc::action::ModeLandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeLand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeLandResponse>* ActionService::Stub::AsyncModeLandRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeLandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeLandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeOffboard(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeOffboardRequest& request, ::mavsdk::rpc::action::ModeOffboardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeOffboardRequest, ::mavsdk::rpc::action::ModeOffboardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeOffboard_, context, request, response);
}

void ActionService::Stub::async::ModeOffboard(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeOffboardRequest* request, ::mavsdk::rpc::action::ModeOffboardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeOffboardRequest, ::mavsdk::rpc::action::ModeOffboardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeOffboard_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeOffboard(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeOffboardRequest* request, ::mavsdk::rpc::action::ModeOffboardResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeOffboard_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeOffboardResponse>* ActionService::Stub::PrepareAsyncModeOffboardRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeOffboardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeOffboardResponse, ::mavsdk::rpc::action::ModeOffboardRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeOffboard_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeOffboardResponse>* ActionService::Stub::AsyncModeOffboardRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeOffboardRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeOffboardRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeFollowMe(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeFollowMeRequest& request, ::mavsdk::rpc::action::ModeFollowMeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeFollowMeRequest, ::mavsdk::rpc::action::ModeFollowMeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeFollowMe_, context, request, response);
}

void ActionService::Stub::async::ModeFollowMe(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeFollowMeRequest* request, ::mavsdk::rpc::action::ModeFollowMeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeFollowMeRequest, ::mavsdk::rpc::action::ModeFollowMeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeFollowMe_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeFollowMe(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeFollowMeRequest* request, ::mavsdk::rpc::action::ModeFollowMeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeFollowMe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeFollowMeResponse>* ActionService::Stub::PrepareAsyncModeFollowMeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeFollowMeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeFollowMeResponse, ::mavsdk::rpc::action::ModeFollowMeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeFollowMe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeFollowMeResponse>* ActionService::Stub::AsyncModeFollowMeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeFollowMeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeFollowMeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeManual(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeManualRequest& request, ::mavsdk::rpc::action::ModeManualResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeManualRequest, ::mavsdk::rpc::action::ModeManualResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeManual_, context, request, response);
}

void ActionService::Stub::async::ModeManual(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeManualRequest* request, ::mavsdk::rpc::action::ModeManualResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeManualRequest, ::mavsdk::rpc::action::ModeManualResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeManual_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeManual(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeManualRequest* request, ::mavsdk::rpc::action::ModeManualResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeManual_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeManualResponse>* ActionService::Stub::PrepareAsyncModeManualRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeManualRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeManualResponse, ::mavsdk::rpc::action::ModeManualRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeManual_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeManualResponse>* ActionService::Stub::AsyncModeManualRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeManualRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeManualRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeAltitudeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAltitudeControlRequest& request, ::mavsdk::rpc::action::ModeAltitudeControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeAltitudeControlRequest, ::mavsdk::rpc::action::ModeAltitudeControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeAltitudeControl_, context, request, response);
}

void ActionService::Stub::async::ModeAltitudeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAltitudeControlRequest* request, ::mavsdk::rpc::action::ModeAltitudeControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeAltitudeControlRequest, ::mavsdk::rpc::action::ModeAltitudeControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeAltitudeControl_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeAltitudeControl(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAltitudeControlRequest* request, ::mavsdk::rpc::action::ModeAltitudeControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeAltitudeControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeAltitudeControlResponse>* ActionService::Stub::PrepareAsyncModeAltitudeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAltitudeControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeAltitudeControlResponse, ::mavsdk::rpc::action::ModeAltitudeControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeAltitudeControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeAltitudeControlResponse>* ActionService::Stub::AsyncModeAltitudeControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAltitudeControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeAltitudeControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModePositionControl(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModePositionControlRequest& request, ::mavsdk::rpc::action::ModePositionControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModePositionControlRequest, ::mavsdk::rpc::action::ModePositionControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModePositionControl_, context, request, response);
}

void ActionService::Stub::async::ModePositionControl(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModePositionControlRequest* request, ::mavsdk::rpc::action::ModePositionControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModePositionControlRequest, ::mavsdk::rpc::action::ModePositionControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModePositionControl_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModePositionControl(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModePositionControlRequest* request, ::mavsdk::rpc::action::ModePositionControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModePositionControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModePositionControlResponse>* ActionService::Stub::PrepareAsyncModePositionControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModePositionControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModePositionControlResponse, ::mavsdk::rpc::action::ModePositionControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModePositionControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModePositionControlResponse>* ActionService::Stub::AsyncModePositionControlRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModePositionControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModePositionControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeAcro(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAcroRequest& request, ::mavsdk::rpc::action::ModeAcroResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeAcroRequest, ::mavsdk::rpc::action::ModeAcroResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeAcro_, context, request, response);
}

void ActionService::Stub::async::ModeAcro(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAcroRequest* request, ::mavsdk::rpc::action::ModeAcroResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeAcroRequest, ::mavsdk::rpc::action::ModeAcroResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeAcro_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeAcro(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAcroRequest* request, ::mavsdk::rpc::action::ModeAcroResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeAcro_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeAcroResponse>* ActionService::Stub::PrepareAsyncModeAcroRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAcroRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeAcroResponse, ::mavsdk::rpc::action::ModeAcroRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeAcro_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeAcroResponse>* ActionService::Stub::AsyncModeAcroRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeAcroRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeAcroRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::ModeStabilized(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeStabilizedRequest& request, ::mavsdk::rpc::action::ModeStabilizedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::ModeStabilizedRequest, ::mavsdk::rpc::action::ModeStabilizedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModeStabilized_, context, request, response);
}

void ActionService::Stub::async::ModeStabilized(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeStabilizedRequest* request, ::mavsdk::rpc::action::ModeStabilizedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::ModeStabilizedRequest, ::mavsdk::rpc::action::ModeStabilizedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeStabilized_, context, request, response, std::move(f));
}

void ActionService::Stub::async::ModeStabilized(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeStabilizedRequest* request, ::mavsdk::rpc::action::ModeStabilizedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModeStabilized_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeStabilizedResponse>* ActionService::Stub::PrepareAsyncModeStabilizedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeStabilizedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::ModeStabilizedResponse, ::mavsdk::rpc::action::ModeStabilizedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModeStabilized_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::ModeStabilizedResponse>* ActionService::Stub::AsyncModeStabilizedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::ModeStabilizedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModeStabilizedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::SetActuator(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetActuatorRequest& request, ::mavsdk::rpc::action::SetActuatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::SetActuatorRequest, ::mavsdk::rpc::action::SetActuatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetActuator_, context, request, response);
}

void ActionService::Stub::async::SetActuator(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetActuatorRequest* request, ::mavsdk::rpc::action::SetActuatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::SetActuatorRequest, ::mavsdk::rpc::action::SetActuatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActuator_, context, request, response, std::move(f));
}

void ActionService::Stub::async::SetActuator(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetActuatorRequest* request, ::mavsdk::rpc::action::SetActuatorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetActuator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetActuatorResponse>* ActionService::Stub::PrepareAsyncSetActuatorRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetActuatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::SetActuatorResponse, ::mavsdk::rpc::action::SetActuatorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetActuator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetActuatorResponse>* ActionService::Stub::AsyncSetActuatorRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetActuatorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetActuatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::TransitionToFixedwing(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToFixedwingRequest& request, ::mavsdk::rpc::action::TransitionToFixedwingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::TransitionToFixedwingRequest, ::mavsdk::rpc::action::TransitionToFixedwingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransitionToFixedwing_, context, request, response);
}

void ActionService::Stub::async::TransitionToFixedwing(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToFixedwingRequest* request, ::mavsdk::rpc::action::TransitionToFixedwingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::TransitionToFixedwingRequest, ::mavsdk::rpc::action::TransitionToFixedwingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransitionToFixedwing_, context, request, response, std::move(f));
}

void ActionService::Stub::async::TransitionToFixedwing(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToFixedwingRequest* request, ::mavsdk::rpc::action::TransitionToFixedwingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransitionToFixedwing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::TransitionToFixedwingResponse>* ActionService::Stub::PrepareAsyncTransitionToFixedwingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToFixedwingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::TransitionToFixedwingResponse, ::mavsdk::rpc::action::TransitionToFixedwingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransitionToFixedwing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::TransitionToFixedwingResponse>* ActionService::Stub::AsyncTransitionToFixedwingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToFixedwingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransitionToFixedwingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::TransitionToMulticopter(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToMulticopterRequest& request, ::mavsdk::rpc::action::TransitionToMulticopterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::TransitionToMulticopterRequest, ::mavsdk::rpc::action::TransitionToMulticopterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransitionToMulticopter_, context, request, response);
}

void ActionService::Stub::async::TransitionToMulticopter(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToMulticopterRequest* request, ::mavsdk::rpc::action::TransitionToMulticopterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::TransitionToMulticopterRequest, ::mavsdk::rpc::action::TransitionToMulticopterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransitionToMulticopter_, context, request, response, std::move(f));
}

void ActionService::Stub::async::TransitionToMulticopter(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToMulticopterRequest* request, ::mavsdk::rpc::action::TransitionToMulticopterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransitionToMulticopter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::TransitionToMulticopterResponse>* ActionService::Stub::PrepareAsyncTransitionToMulticopterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToMulticopterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::TransitionToMulticopterResponse, ::mavsdk::rpc::action::TransitionToMulticopterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransitionToMulticopter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::TransitionToMulticopterResponse>* ActionService::Stub::AsyncTransitionToMulticopterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::TransitionToMulticopterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransitionToMulticopterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::GetTakeoffAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetTakeoffAltitudeRequest& request, ::mavsdk::rpc::action::GetTakeoffAltitudeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::GetTakeoffAltitudeRequest, ::mavsdk::rpc::action::GetTakeoffAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTakeoffAltitude_, context, request, response);
}

void ActionService::Stub::async::GetTakeoffAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetTakeoffAltitudeRequest* request, ::mavsdk::rpc::action::GetTakeoffAltitudeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::GetTakeoffAltitudeRequest, ::mavsdk::rpc::action::GetTakeoffAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTakeoffAltitude_, context, request, response, std::move(f));
}

void ActionService::Stub::async::GetTakeoffAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetTakeoffAltitudeRequest* request, ::mavsdk::rpc::action::GetTakeoffAltitudeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTakeoffAltitude_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::GetTakeoffAltitudeResponse>* ActionService::Stub::PrepareAsyncGetTakeoffAltitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetTakeoffAltitudeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::GetTakeoffAltitudeResponse, ::mavsdk::rpc::action::GetTakeoffAltitudeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTakeoffAltitude_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::GetTakeoffAltitudeResponse>* ActionService::Stub::AsyncGetTakeoffAltitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetTakeoffAltitudeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTakeoffAltitudeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::SetTakeoffAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetTakeoffAltitudeRequest& request, ::mavsdk::rpc::action::SetTakeoffAltitudeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::SetTakeoffAltitudeRequest, ::mavsdk::rpc::action::SetTakeoffAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTakeoffAltitude_, context, request, response);
}

void ActionService::Stub::async::SetTakeoffAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetTakeoffAltitudeRequest* request, ::mavsdk::rpc::action::SetTakeoffAltitudeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::SetTakeoffAltitudeRequest, ::mavsdk::rpc::action::SetTakeoffAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTakeoffAltitude_, context, request, response, std::move(f));
}

void ActionService::Stub::async::SetTakeoffAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetTakeoffAltitudeRequest* request, ::mavsdk::rpc::action::SetTakeoffAltitudeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTakeoffAltitude_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetTakeoffAltitudeResponse>* ActionService::Stub::PrepareAsyncSetTakeoffAltitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetTakeoffAltitudeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::SetTakeoffAltitudeResponse, ::mavsdk::rpc::action::SetTakeoffAltitudeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTakeoffAltitude_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetTakeoffAltitudeResponse>* ActionService::Stub::AsyncSetTakeoffAltitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetTakeoffAltitudeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTakeoffAltitudeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::GetMaximumSpeed(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetMaximumSpeedRequest& request, ::mavsdk::rpc::action::GetMaximumSpeedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::GetMaximumSpeedRequest, ::mavsdk::rpc::action::GetMaximumSpeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMaximumSpeed_, context, request, response);
}

void ActionService::Stub::async::GetMaximumSpeed(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetMaximumSpeedRequest* request, ::mavsdk::rpc::action::GetMaximumSpeedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::GetMaximumSpeedRequest, ::mavsdk::rpc::action::GetMaximumSpeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMaximumSpeed_, context, request, response, std::move(f));
}

void ActionService::Stub::async::GetMaximumSpeed(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetMaximumSpeedRequest* request, ::mavsdk::rpc::action::GetMaximumSpeedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMaximumSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::GetMaximumSpeedResponse>* ActionService::Stub::PrepareAsyncGetMaximumSpeedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetMaximumSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::GetMaximumSpeedResponse, ::mavsdk::rpc::action::GetMaximumSpeedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMaximumSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::GetMaximumSpeedResponse>* ActionService::Stub::AsyncGetMaximumSpeedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetMaximumSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMaximumSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::SetMaximumSpeed(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetMaximumSpeedRequest& request, ::mavsdk::rpc::action::SetMaximumSpeedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::SetMaximumSpeedRequest, ::mavsdk::rpc::action::SetMaximumSpeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMaximumSpeed_, context, request, response);
}

void ActionService::Stub::async::SetMaximumSpeed(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetMaximumSpeedRequest* request, ::mavsdk::rpc::action::SetMaximumSpeedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::SetMaximumSpeedRequest, ::mavsdk::rpc::action::SetMaximumSpeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaximumSpeed_, context, request, response, std::move(f));
}

void ActionService::Stub::async::SetMaximumSpeed(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetMaximumSpeedRequest* request, ::mavsdk::rpc::action::SetMaximumSpeedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaximumSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetMaximumSpeedResponse>* ActionService::Stub::PrepareAsyncSetMaximumSpeedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetMaximumSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::SetMaximumSpeedResponse, ::mavsdk::rpc::action::SetMaximumSpeedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMaximumSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetMaximumSpeedResponse>* ActionService::Stub::AsyncSetMaximumSpeedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetMaximumSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMaximumSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::GetReturnToLaunchAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest& request, ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest, ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetReturnToLaunchAltitude_, context, request, response);
}

void ActionService::Stub::async::GetReturnToLaunchAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest* request, ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest, ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReturnToLaunchAltitude_, context, request, response, std::move(f));
}

void ActionService::Stub::async::GetReturnToLaunchAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest* request, ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetReturnToLaunchAltitude_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse>* ActionService::Stub::PrepareAsyncGetReturnToLaunchAltitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse, ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetReturnToLaunchAltitude_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse>* ActionService::Stub::AsyncGetReturnToLaunchAltitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetReturnToLaunchAltitudeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::SetReturnToLaunchAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest& request, ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest, ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetReturnToLaunchAltitude_, context, request, response);
}

void ActionService::Stub::async::SetReturnToLaunchAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest* request, ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest, ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetReturnToLaunchAltitude_, context, request, response, std::move(f));
}

void ActionService::Stub::async::SetReturnToLaunchAltitude(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest* request, ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetReturnToLaunchAltitude_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse>* ActionService::Stub::PrepareAsyncSetReturnToLaunchAltitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse, ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetReturnToLaunchAltitude_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse>* ActionService::Stub::AsyncSetReturnToLaunchAltitudeRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetReturnToLaunchAltitudeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ActionService::Stub::SetCurrentSpeed(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetCurrentSpeedRequest& request, ::mavsdk::rpc::action::SetCurrentSpeedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::action::SetCurrentSpeedRequest, ::mavsdk::rpc::action::SetCurrentSpeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCurrentSpeed_, context, request, response);
}

void ActionService::Stub::async::SetCurrentSpeed(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetCurrentSpeedRequest* request, ::mavsdk::rpc::action::SetCurrentSpeedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::action::SetCurrentSpeedRequest, ::mavsdk::rpc::action::SetCurrentSpeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentSpeed_, context, request, response, std::move(f));
}

void ActionService::Stub::async::SetCurrentSpeed(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetCurrentSpeedRequest* request, ::mavsdk::rpc::action::SetCurrentSpeedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCurrentSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetCurrentSpeedResponse>* ActionService::Stub::PrepareAsyncSetCurrentSpeedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetCurrentSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::action::SetCurrentSpeedResponse, ::mavsdk::rpc::action::SetCurrentSpeedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCurrentSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::action::SetCurrentSpeedResponse>* ActionService::Stub::AsyncSetCurrentSpeedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::action::SetCurrentSpeedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCurrentSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

ActionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ArmRequest, ::mavsdk::rpc::action::ArmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ArmRequest* req,
             ::mavsdk::rpc::action::ArmResponse* resp) {
               return service->Arm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::DisarmRequest, ::mavsdk::rpc::action::DisarmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::DisarmRequest* req,
             ::mavsdk::rpc::action::DisarmResponse* resp) {
               return service->Disarm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::TakeoffRequest, ::mavsdk::rpc::action::TakeoffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::TakeoffRequest* req,
             ::mavsdk::rpc::action::TakeoffResponse* resp) {
               return service->Takeoff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::LandRequest, ::mavsdk::rpc::action::LandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::LandRequest* req,
             ::mavsdk::rpc::action::LandResponse* resp) {
               return service->Land(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::RebootRequest, ::mavsdk::rpc::action::RebootResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::RebootRequest* req,
             ::mavsdk::rpc::action::RebootResponse* resp) {
               return service->Reboot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ShutdownRequest, ::mavsdk::rpc::action::ShutdownResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ShutdownRequest* req,
             ::mavsdk::rpc::action::ShutdownResponse* resp) {
               return service->Shutdown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::TerminateRequest, ::mavsdk::rpc::action::TerminateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::TerminateRequest* req,
             ::mavsdk::rpc::action::TerminateResponse* resp) {
               return service->Terminate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::KillRequest, ::mavsdk::rpc::action::KillResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::KillRequest* req,
             ::mavsdk::rpc::action::KillResponse* resp) {
               return service->Kill(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ReturnToLaunchRequest, ::mavsdk::rpc::action::ReturnToLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ReturnToLaunchRequest* req,
             ::mavsdk::rpc::action::ReturnToLaunchResponse* resp) {
               return service->ReturnToLaunch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::GotoLocationRequest, ::mavsdk::rpc::action::GotoLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::GotoLocationRequest* req,
             ::mavsdk::rpc::action::GotoLocationResponse* resp) {
               return service->GotoLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::DoOrbitRequest, ::mavsdk::rpc::action::DoOrbitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::DoOrbitRequest* req,
             ::mavsdk::rpc::action::DoOrbitResponse* resp) {
               return service->DoOrbit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::HoldRequest, ::mavsdk::rpc::action::HoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::HoldRequest* req,
             ::mavsdk::rpc::action::HoldResponse* resp) {
               return service->Hold(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeTakeoffRequest, ::mavsdk::rpc::action::ModeTakeoffResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeTakeoffRequest* req,
             ::mavsdk::rpc::action::ModeTakeoffResponse* resp) {
               return service->ModeTakeoff(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeHoldRequest, ::mavsdk::rpc::action::ModeHoldResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeHoldRequest* req,
             ::mavsdk::rpc::action::ModeHoldResponse* resp) {
               return service->ModeHold(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeMissionRequest, ::mavsdk::rpc::action::ModeMissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeMissionRequest* req,
             ::mavsdk::rpc::action::ModeMissionResponse* resp) {
               return service->ModeMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeReturnToLaunchRequest, ::mavsdk::rpc::action::ModeReturnToLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeReturnToLaunchRequest* req,
             ::mavsdk::rpc::action::ModeReturnToLaunchResponse* resp) {
               return service->ModeReturnToLaunch(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeLandRequest, ::mavsdk::rpc::action::ModeLandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeLandRequest* req,
             ::mavsdk::rpc::action::ModeLandResponse* resp) {
               return service->ModeLand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeOffboardRequest, ::mavsdk::rpc::action::ModeOffboardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeOffboardRequest* req,
             ::mavsdk::rpc::action::ModeOffboardResponse* resp) {
               return service->ModeOffboard(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeFollowMeRequest, ::mavsdk::rpc::action::ModeFollowMeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeFollowMeRequest* req,
             ::mavsdk::rpc::action::ModeFollowMeResponse* resp) {
               return service->ModeFollowMe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeManualRequest, ::mavsdk::rpc::action::ModeManualResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeManualRequest* req,
             ::mavsdk::rpc::action::ModeManualResponse* resp) {
               return service->ModeManual(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeAltitudeControlRequest, ::mavsdk::rpc::action::ModeAltitudeControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeAltitudeControlRequest* req,
             ::mavsdk::rpc::action::ModeAltitudeControlResponse* resp) {
               return service->ModeAltitudeControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModePositionControlRequest, ::mavsdk::rpc::action::ModePositionControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModePositionControlRequest* req,
             ::mavsdk::rpc::action::ModePositionControlResponse* resp) {
               return service->ModePositionControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeAcroRequest, ::mavsdk::rpc::action::ModeAcroResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeAcroRequest* req,
             ::mavsdk::rpc::action::ModeAcroResponse* resp) {
               return service->ModeAcro(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::ModeStabilizedRequest, ::mavsdk::rpc::action::ModeStabilizedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::ModeStabilizedRequest* req,
             ::mavsdk::rpc::action::ModeStabilizedResponse* resp) {
               return service->ModeStabilized(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::SetActuatorRequest, ::mavsdk::rpc::action::SetActuatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::SetActuatorRequest* req,
             ::mavsdk::rpc::action::SetActuatorResponse* resp) {
               return service->SetActuator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::TransitionToFixedwingRequest, ::mavsdk::rpc::action::TransitionToFixedwingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::TransitionToFixedwingRequest* req,
             ::mavsdk::rpc::action::TransitionToFixedwingResponse* resp) {
               return service->TransitionToFixedwing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::TransitionToMulticopterRequest, ::mavsdk::rpc::action::TransitionToMulticopterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::TransitionToMulticopterRequest* req,
             ::mavsdk::rpc::action::TransitionToMulticopterResponse* resp) {
               return service->TransitionToMulticopter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::GetTakeoffAltitudeRequest, ::mavsdk::rpc::action::GetTakeoffAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::GetTakeoffAltitudeRequest* req,
             ::mavsdk::rpc::action::GetTakeoffAltitudeResponse* resp) {
               return service->GetTakeoffAltitude(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::SetTakeoffAltitudeRequest, ::mavsdk::rpc::action::SetTakeoffAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::SetTakeoffAltitudeRequest* req,
             ::mavsdk::rpc::action::SetTakeoffAltitudeResponse* resp) {
               return service->SetTakeoffAltitude(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::GetMaximumSpeedRequest, ::mavsdk::rpc::action::GetMaximumSpeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::GetMaximumSpeedRequest* req,
             ::mavsdk::rpc::action::GetMaximumSpeedResponse* resp) {
               return service->GetMaximumSpeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::SetMaximumSpeedRequest, ::mavsdk::rpc::action::SetMaximumSpeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::SetMaximumSpeedRequest* req,
             ::mavsdk::rpc::action::SetMaximumSpeedResponse* resp) {
               return service->SetMaximumSpeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest, ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest* req,
             ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse* resp) {
               return service->GetReturnToLaunchAltitude(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest, ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest* req,
             ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse* resp) {
               return service->SetReturnToLaunchAltitude(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ActionService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ActionService::Service, ::mavsdk::rpc::action::SetCurrentSpeedRequest, ::mavsdk::rpc::action::SetCurrentSpeedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ActionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::action::SetCurrentSpeedRequest* req,
             ::mavsdk::rpc::action::SetCurrentSpeedResponse* resp) {
               return service->SetCurrentSpeed(ctx, req, resp);
             }, this)));
}

ActionService::Service::~Service() {
}

::grpc::Status ActionService::Service::Arm(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ArmRequest* request, ::mavsdk::rpc::action::ArmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::Disarm(::grpc::ServerContext* context, const ::mavsdk::rpc::action::DisarmRequest* request, ::mavsdk::rpc::action::DisarmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::Takeoff(::grpc::ServerContext* context, const ::mavsdk::rpc::action::TakeoffRequest* request, ::mavsdk::rpc::action::TakeoffResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::Land(::grpc::ServerContext* context, const ::mavsdk::rpc::action::LandRequest* request, ::mavsdk::rpc::action::LandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::Reboot(::grpc::ServerContext* context, const ::mavsdk::rpc::action::RebootRequest* request, ::mavsdk::rpc::action::RebootResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::Shutdown(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ShutdownRequest* request, ::mavsdk::rpc::action::ShutdownResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::Terminate(::grpc::ServerContext* context, const ::mavsdk::rpc::action::TerminateRequest* request, ::mavsdk::rpc::action::TerminateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::Kill(::grpc::ServerContext* context, const ::mavsdk::rpc::action::KillRequest* request, ::mavsdk::rpc::action::KillResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ReturnToLaunch(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ReturnToLaunchRequest* request, ::mavsdk::rpc::action::ReturnToLaunchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::GotoLocation(::grpc::ServerContext* context, const ::mavsdk::rpc::action::GotoLocationRequest* request, ::mavsdk::rpc::action::GotoLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::DoOrbit(::grpc::ServerContext* context, const ::mavsdk::rpc::action::DoOrbitRequest* request, ::mavsdk::rpc::action::DoOrbitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::Hold(::grpc::ServerContext* context, const ::mavsdk::rpc::action::HoldRequest* request, ::mavsdk::rpc::action::HoldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeTakeoff(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeTakeoffRequest* request, ::mavsdk::rpc::action::ModeTakeoffResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeHold(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeHoldRequest* request, ::mavsdk::rpc::action::ModeHoldResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeMission(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeMissionRequest* request, ::mavsdk::rpc::action::ModeMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeReturnToLaunch(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeReturnToLaunchRequest* request, ::mavsdk::rpc::action::ModeReturnToLaunchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeLand(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeLandRequest* request, ::mavsdk::rpc::action::ModeLandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeOffboard(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeOffboardRequest* request, ::mavsdk::rpc::action::ModeOffboardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeFollowMe(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeFollowMeRequest* request, ::mavsdk::rpc::action::ModeFollowMeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeManual(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeManualRequest* request, ::mavsdk::rpc::action::ModeManualResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeAltitudeControl(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeAltitudeControlRequest* request, ::mavsdk::rpc::action::ModeAltitudeControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModePositionControl(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModePositionControlRequest* request, ::mavsdk::rpc::action::ModePositionControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeAcro(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeAcroRequest* request, ::mavsdk::rpc::action::ModeAcroResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::ModeStabilized(::grpc::ServerContext* context, const ::mavsdk::rpc::action::ModeStabilizedRequest* request, ::mavsdk::rpc::action::ModeStabilizedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::SetActuator(::grpc::ServerContext* context, const ::mavsdk::rpc::action::SetActuatorRequest* request, ::mavsdk::rpc::action::SetActuatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::TransitionToFixedwing(::grpc::ServerContext* context, const ::mavsdk::rpc::action::TransitionToFixedwingRequest* request, ::mavsdk::rpc::action::TransitionToFixedwingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::TransitionToMulticopter(::grpc::ServerContext* context, const ::mavsdk::rpc::action::TransitionToMulticopterRequest* request, ::mavsdk::rpc::action::TransitionToMulticopterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::GetTakeoffAltitude(::grpc::ServerContext* context, const ::mavsdk::rpc::action::GetTakeoffAltitudeRequest* request, ::mavsdk::rpc::action::GetTakeoffAltitudeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::SetTakeoffAltitude(::grpc::ServerContext* context, const ::mavsdk::rpc::action::SetTakeoffAltitudeRequest* request, ::mavsdk::rpc::action::SetTakeoffAltitudeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::GetMaximumSpeed(::grpc::ServerContext* context, const ::mavsdk::rpc::action::GetMaximumSpeedRequest* request, ::mavsdk::rpc::action::GetMaximumSpeedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::SetMaximumSpeed(::grpc::ServerContext* context, const ::mavsdk::rpc::action::SetMaximumSpeedRequest* request, ::mavsdk::rpc::action::SetMaximumSpeedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::GetReturnToLaunchAltitude(::grpc::ServerContext* context, const ::mavsdk::rpc::action::GetReturnToLaunchAltitudeRequest* request, ::mavsdk::rpc::action::GetReturnToLaunchAltitudeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::SetReturnToLaunchAltitude(::grpc::ServerContext* context, const ::mavsdk::rpc::action::SetReturnToLaunchAltitudeRequest* request, ::mavsdk::rpc::action::SetReturnToLaunchAltitudeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ActionService::Service::SetCurrentSpeed(::grpc::ServerContext* context, const ::mavsdk::rpc::action::SetCurrentSpeedRequest* request, ::mavsdk::rpc::action::SetCurrentSpeedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace action

